location / {
        # enable search for precompressed files ending in .gz
	# nginx needs to be complied using â€“-with-http_gzip_static_module
	# for this to work, comment out if using nginx from aptitude
        gzip_static on;

	# if the requested file exists, return it immediately
        if (-f $request_filename) {
                break;
        }

        set $supercache_file '';
        set $supercache_uri $request_uri;

        if ($request_method = POST) {
                set $supercache_uri '';
        }

        # Using pretty permalinks, so bypass the cache for any query string
        if ($query_string) {
                set $supercache_uri '';
        }

        if ($http_cookie ~* "comment_author_|wordpress|wp-postpass_" ) {
                set $supercache_uri '';
        }

	# if we haven't bypassed the cache, specify our supercache file
        if ($supercache_uri ~ ^(.+)$) {
                set $supercache_file /wp-content/cache/supercache/$http_host/$1index.html;
        }

	# only rewrite to the supercache file if it actually exists
        if (-f $document_root$supercache_file) {
                rewrite ^(.*)$ $supercache_file break;
        }

	# all other requests go to Wordpress
        if (!-e $request_filename) {
                rewrite . /index.php last;
        }

#	try_files $uri $uri/ /index.php?$args;
}

# Deny access to any files with a .php extension in the uploads directory
# Works in sub-directory installs and also in multisite network
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location ~* /(?:uploads|files)/.*\.php$ {
        deny all;
}

include global/php.conf;

rewrite /wp-admin$ $scheme://$host$uri/ permanent;

location ~ /download/ {
#       deny all;
      rewrite ^/download/(.*)$ /wp-content/plugins/download-monitor/download.php?id=$1 last;
}
